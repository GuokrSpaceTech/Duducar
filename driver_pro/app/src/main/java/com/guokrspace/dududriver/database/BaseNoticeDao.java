package com.guokrspace.dududriver.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.guokrspace.dududriver.database.BaseNotice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BASE_NOTICE.
*/
public class BaseNoticeDao extends AbstractDao<BaseNotice, Long> {

    public static final String TABLENAME = "BASE_NOTICE";

    /**
     * Properties of entity BaseNotice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property MessageBody = new Property(3, String.class, "messageBody", false, "MESSAGE_BODY");
        public final static Property OutOfTime = new Property(4, Boolean.class, "outOfTime", false, "OUT_OF_TIME");
        public final static Property NoticeId = new Property(5, Integer.class, "noticeId", false, "NOTICE_ID");
    };


    public BaseNoticeDao(DaoConfig config) {
        super(config);
    }
    
    public BaseNoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BASE_NOTICE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DATE' TEXT," + // 1: date
                "'TYPE' TEXT," + // 2: type
                "'MESSAGE_BODY' TEXT," + // 3: messageBody
                "'OUT_OF_TIME' INTEGER," + // 4: outOfTime
                "'NOTICE_ID' INTEGER);"); // 5: noticeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BASE_NOTICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BaseNotice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String messageBody = entity.getMessageBody();
        if (messageBody != null) {
            stmt.bindString(4, messageBody);
        }
 
        Boolean outOfTime = entity.getOutOfTime();
        if (outOfTime != null) {
            stmt.bindLong(5, outOfTime ? 1l: 0l);
        }
 
        Integer noticeId = entity.getNoticeId();
        if (noticeId != null) {
            stmt.bindLong(6, noticeId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BaseNotice readEntity(Cursor cursor, int offset) {
        BaseNotice entity = new BaseNotice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // messageBody
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // outOfTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // noticeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BaseNotice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageBody(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOutOfTime(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setNoticeId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BaseNotice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BaseNotice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
