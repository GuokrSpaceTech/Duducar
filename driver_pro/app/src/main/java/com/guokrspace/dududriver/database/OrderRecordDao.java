package com.guokrspace.dududriver.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.guokrspace.dududriver.database.OrderRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER_RECORD.
*/
public class OrderRecordDao extends AbstractDao<OrderRecord, Long> {

    public static final String TABLENAME = "ORDER_RECORD";

    /**
     * Properties of entity OrderRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhoneNum = new Property(1, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property StartAddr = new Property(2, String.class, "startAddr", false, "START_ADDR");
        public final static Property DestAddr = new Property(3, String.class, "destAddr", false, "DEST_ADDR");
        public final static Property StartLat = new Property(4, String.class, "startLat", false, "START_LAT");
        public final static Property StartLng = new Property(5, String.class, "startLng", false, "START_LNG");
        public final static Property DestLat = new Property(6, String.class, "destLat", false, "DEST_LAT");
        public final static Property DestLng = new Property(7, String.class, "destLng", false, "DEST_LNG");
        public final static Property Mileage = new Property(8, String.class, "mileage", false, "MILEAGE");
        public final static Property Price = new Property(9, String.class, "price", false, "PRICE");
        public final static Property CarType = new Property(10, String.class, "carType", false, "CAR_TYPE");
        public final static Property OrderTime = new Property(11, String.class, "orderTime", false, "ORDER_TIME");
    };


    public OrderRecordDao(DaoConfig config) {
        super(config);
    }
    
    public OrderRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'PHONE_NUM' TEXT," + // 1: phoneNum
                "'START_ADDR' TEXT," + // 2: startAddr
                "'DEST_ADDR' TEXT," + // 3: destAddr
                "'START_LAT' TEXT," + // 4: startLat
                "'START_LNG' TEXT," + // 5: startLng
                "'DEST_LAT' TEXT," + // 6: destLat
                "'DEST_LNG' TEXT," + // 7: destLng
                "'MILEAGE' TEXT," + // 8: mileage
                "'PRICE' TEXT," + // 9: price
                "'CAR_TYPE' TEXT," + // 10: carType
                "'ORDER_TIME' TEXT);"); // 11: orderTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(2, phoneNum);
        }
 
        String startAddr = entity.getStartAddr();
        if (startAddr != null) {
            stmt.bindString(3, startAddr);
        }
 
        String destAddr = entity.getDestAddr();
        if (destAddr != null) {
            stmt.bindString(4, destAddr);
        }
 
        String startLat = entity.getStartLat();
        if (startLat != null) {
            stmt.bindString(5, startLat);
        }
 
        String startLng = entity.getStartLng();
        if (startLng != null) {
            stmt.bindString(6, startLng);
        }
 
        String destLat = entity.getDestLat();
        if (destLat != null) {
            stmt.bindString(7, destLat);
        }
 
        String destLng = entity.getDestLng();
        if (destLng != null) {
            stmt.bindString(8, destLng);
        }
 
        String mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindString(9, mileage);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(10, price);
        }
 
        String carType = entity.getCarType();
        if (carType != null) {
            stmt.bindString(11, carType);
        }
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(12, orderTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderRecord readEntity(Cursor cursor, int offset) {
        OrderRecord entity = new OrderRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phoneNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // startAddr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // destAddr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startLat
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // startLng
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // destLat
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // destLng
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mileage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // carType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // orderTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoneNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartAddr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDestAddr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartLat(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartLng(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDestLat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDestLng(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMileage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCarType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrderTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
